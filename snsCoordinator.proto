// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package snsCoordinator;

import "google/protobuf/timestamp.proto";

service SNSCoordinator{
    //used in MP2 sns more
    //rpc Login (Request) returns (Reply) {}
    //Server sends the cluster to the coordinator 
    rpc ClusterSpace (ClusterInfo) returns (ServerInfo){}
    //Client sends the connection to the coordinator
    rpc GetConn(JoinReq) returns (ClusterInfo){}
    //need the cluster to have the follower information
    rpc GetFollowing(JoinReq) returns (FollowerInfo)
    // Bidirectional Communication to check on server interaction
    rpc ServerCommunicate (stream HeartBeat) returns (stream HeartBeat) {}
}

enum ServerType{
    MASTER = 0;
    SLAVE = 1;
    SYNCHRONIZER = 3;
    COORDINATOR = 4;
}

enum RequesterType{
    CLIENT = 0;
    SERVER = 1;
}

message Req{
    // type of requester
    RequesterType requester = 1;
    // message with their port number
    string port_number = 2;
    // the id of the request
    int32 id = 3;
    // the type of server
    ServerType server_type = 4;
}

message Rep{
    string msg = 1;
}

//Information surrounding the cluster AKA machine add, port, follower id and server id
message ClusterInfo{
  string machineAdd = 1;
  string port =2;
  int32 followId = 3;
  int32 sid = 4;
}

//server Information; master, port num, address
message ServerInfo{
  bool master = 1; //make the master the machine running? I think this is how it works for the kill
  string port = 2;
  string addre = 3;
}

//Join request (we just want the id of the user to join the cluster)
message JoinReq{
  int32 id = 1;
}

//follower information; id, following and followers
message FollowerInfo{
  int32 id = 1;
  repeated int32 following = 2;
  repeated int32 followers = 3;
}

message HeartBeat{
    // id of the server
    int32 sid = 1;
    // type of the server
    ServerType s_type = 2;
    //Time the message was sent
    google.protobuf.Timestamp timestamp = 3;
}
