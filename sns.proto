// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package csce438;

import "google/protobuf/timestamp.proto";

// The messenger service definition.
service SNSService{

  rpc Login (Request) returns (Reply) {}
  rpc List (Request) returns (ListReply) {}
  rpc Follow (Request) returns (Reply) {}
  //rpc UnFollow (Request) returns (Reply) {}
  // Bidirectional streaming RPC
  rpc Timeline (stream Message) returns (stream Message) {} 
	
  //Need to connect the slave and master along with the streaming
  //slave needs master to know they exist
  rpc SlaveToMaster(ServerInfo)returns(ServerInfo){}
  //Slave needs to updated in Followers, login and the timeline from master
  rpc FollowUpdate(FollowData) returns (Filler){}
  rpc LoginUpdate(Request) returns (Reply){}
  rpc TimelineUpdate (MsgTimeline) returns (Filler){}
  
}

service SNSCoordinator{
    //used in MP2 sns more
    //rpc Login (Req) returns (Rep) {}
    //Server sends the cluster to the coordinator 
    rpc ClusterSpace (ClusterInfo) returns (ServerInfo){}
    //Client sends the connection to the coordinator
    rpc GetConn (JoinReq) returns (ClusterInfo){}
    //need the cluster to have the follower information
    rpc GetFollowing (JoinReq) returns (FollowerInfo){}
    // Bidirectional Communication to check on server interaction
    rpc getServerCon (HrtBeat) returns (HrtBeat) {}
    rpc GetAllUsers (Filler) returns (AllUsers) {}
}

service SNSFollow{
  rpc Following (FollowPair) returns (Reply) {} 
  rpc newMessage (Message) returns (Reply) {}
  rpc newClient (JoinReq) returns (Reply) {} 
}

message ListReply {
  repeated int32 all_users = 1;
  repeated int32 followers = 2;
}

message Request {
  int32 username = 1;
  repeated int32 arguments = 2;
}

message Reply {
  string msg = 1;
}

message Message {
  //Username who sent the message
  int32 username = 1;
  //Message from the user
  string msg = 2;
  //Time the message was sent
  uint64 timestamp = 3;
}

enum ServerType{
    MASTER = 0;
    SLAVE = 1;
    SYNCHRONIZER = 3;
    COORDINATOR = 4;
}

enum RequesterType{
    CLIENT = 0;
    SERVER = 1;
}

message Req{
    // type of requester
    RequesterType requester = 1;
    // message with their port number
    string port_number = 2;
    // the id of the request
    int32 id = 3;
    // the type of server
    ServerType server_type = 4;
}

message Rep{
    string msg = 1;
}

//Information surrounding the cluster AKA machine add, port, follower id and server id
message ClusterInfo{
  string addr = 1;
  string port =2;
  int32 followId = 3;
  int32 sid = 4;
}

//server Information; master, port num, address
message ServerInfo{
  bool master = 1; //make the master the machine running? I think this is how it works for the kill
  string port = 2;
  string addre = 3;
}

//Join request (we just want the id of the user to join the cluster)
message JoinReq{
  int32 id = 1;
}

//follower information; id, following and followers
message FollowerInfo{
  int32 id = 1;
  repeated int32 following = 2;
  repeated int32 followers = 3;
}

message HrtBeat{
    // id of the server
    int32 sid = 1;
    // type of the server
    bool stype = 2;
}

message AllUsers {
    repeated int32 users = 1;
}

message FollowPair {
  //Client id follows fid
  int32 id = 1;
  int32 fid = 2; 
}

//Data about who a certain client follows
message FollowData {
  //The client's ID
  int32 id = 1;
  //Who they're following
  repeated int32 following = 2;
  //Whose following them
  repeated int32 followers = 3;
}

//issue with make had a problem with the get all users 
message Filler {
  bool filled = 1;
}

//fixes overide issue
message MsgTimeline {
  int32 id = 1;
  repeated string msgs = 2;
}